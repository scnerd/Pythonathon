-- MySQL dump 10.13  Distrib 5.5.52, for debian-linux-gnu (x86_64)
--
-- Host: localhost    Database: mellivora
-- ------------------------------------------------------
-- Server version	5.5.52-0ubuntu0.14.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `categories`
--

DROP TABLE IF EXISTS `categories`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `categories` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `added` int(10) unsigned NOT NULL,
  `added_by` int(10) unsigned NOT NULL,
  `title` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `exposed` tinyint(1) NOT NULL DEFAULT '1',
  `available_from` int(10) unsigned NOT NULL DEFAULT '0',
  `available_until` int(10) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `categories`
--

LOCK TABLES `categories` WRITE;
/*!40000 ALTER TABLE `categories` DISABLE KEYS */;
INSERT INTO `categories` VALUES (1,1474170432,1,'Easy','Easy problems',1,1474171200,1505707200),(2,1474170458,1,'Medium','Medium problems',1,1474171200,1505707200),(3,1474170472,1,'Hard','Hard problems',1,1474171200,1505707200),(4,1474170528,1,'Introduction to Programming and Python','Introductory problems. No points, but intended to teach you the tools and terms if you\'ve never programmed before.',1,1474171200,1505707200);
/*!40000 ALTER TABLE `categories` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `challenges`
--

DROP TABLE IF EXISTS `challenges`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `challenges` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `added` int(10) unsigned NOT NULL,
  `added_by` int(10) unsigned NOT NULL,
  `title` varchar(255) NOT NULL,
  `category` smallint(5) unsigned NOT NULL,
  `description` text NOT NULL,
  `exposed` tinyint(1) NOT NULL DEFAULT '1',
  `available_from` int(10) unsigned NOT NULL DEFAULT '0',
  `available_until` int(10) unsigned NOT NULL DEFAULT '0',
  `flag` text NOT NULL,
  `case_insensitive` tinyint(1) NOT NULL DEFAULT '1',
  `automark` tinyint(1) NOT NULL DEFAULT '1',
  `points` int(10) unsigned NOT NULL,
  `num_attempts_allowed` tinyint(3) unsigned NOT NULL DEFAULT '5',
  `min_seconds_between_submissions` smallint(5) unsigned NOT NULL DEFAULT '0',
  `relies_on` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `category` (`category`)
) ENGINE=InnoDB AUTO_INCREMENT=29 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `challenges`
--

LOCK TABLES `challenges` WRITE;
/*!40000 ALTER TABLE `challenges` DISABLE KEYS */;
INSERT INTO `challenges` VALUES (1,1474170640,1,'Free Points',1,'Let\'s start off with a few exercises to get you warmed up in Python! From the python interactive shell, try entering the following code: print \"My first command!\"\r\nOnce you got this working type \"free points!\" as the answer.',0,1478296800,1478307600,'free points!',0,1,2,0,0,0),(2,1474170686,1,'Indexing',1,'Python lets you treat strings like arrays (i.e. if a = \"python\", a[3] is \"h\"). What is the 155th character in this string: \r\n\"Through three cheese trees three free fleas flew. While these fleas flew, freezy breeze blew. Freezy breeze made these three trees freeze. Freezy trees made these trees\' cheese freeze. That\'s what made these three free fleas sneeze.\"\r\nDon\'t forget that indexes begin with zero!',1,1478296800,1478307600,'d',0,1,2,0,0,0),(3,1474170707,1,'Ranges',1,'Using python\'s range() and sum() functions, calculate the sum of every third number between 100 and 300 (i.e. 100 + 103 + â€¦ + 298)',1,1478296800,1478307600,'13333',0,1,2,0,0,0),(4,1474170721,1,'Rawr',1,'Using python\'s raw_input() function, create a script that will prompt the user for an integer and then print out how far away it is from the number 54321. For example, if the user inputs \"33321\" the script should print out \"21000\". Input the numbers 40984, 183329, and -31458 into the script and submit all three corresponding answers (space seperated). Hint: int() and abs() may come in handy.',1,1478296800,1478307600,'13337 129008 85779',0,1,2,0,0,0),(5,1474170753,1,'Arggg',1,'You can read in command-line arguments for a script by callling \"import sys\" and using the sys.argv list (the first element is the script name). Create a script that takes in an integer argument and prints out the results of time.ctime() using the passed-in argument (converts unix time to human readable date string). What month do you get for the value 552196920?',1,1478296800,1478307600,'July',0,1,2,0,0,0),(6,1474170767,1,'Bible Trivia',1,'Download the kjv.txt file. You can use python\'s open() and file\'s read() functions to read the contents of a file into a variable. Using str\'s count() function, determine which of these four words - grace, mercy, wrath, justice - appears the most in the KJV. Format your answer as the word, a space, and then the number of times it occurs. For example, \"grace 23\". Make sure your search is case insensitive!',1,1478296800,1478307600,'mercy 277',0,1,2,0,0,0),(7,1474171277,1,'Whitewash',1,'An administrator captured some data on the network that they were unable to identify and saved it as hex to encoded.txt. Using str\'s decode() function, can you decode the data and determine who the author of the text is? You can find a list of possible encodings in the python help file (search \"codecs\").',1,1478296800,1478307600,'Mark Twain',0,1,2,0,0,0),(8,1474171289,1,'Monster',1,'What does this base64 encoded message say?\r\nTWFobmEgTWFobmE=',1,1478296800,1478307600,'Mahna Mahna',0,1,2,0,0,0),(9,1474171304,1,'All Your Bases',1,'What is the binary, octal, and hexadecimal representation of the integer 42? Write all three answers space seperated (i.e. \"1001111 117 4f\").\r\nHint: you can either use python\'s built-in functions (search \"Built-in Functions\" in the help file) or format strings (under the \"string\" section)',1,1478296800,1478307600,'101010 52 2a',0,1,2,0,0,0),(10,1474172482,1,'1337',2,'What is the lowest integer where if you divide the number by the sum of its digits you get 1337? For example, if you take the number 684, you would get 684/(6+8+4) = 38.\r\nDon\'t forget, integer division automatically rounds down the answer.',1,1478296800,1478307600,'12033',0,1,5,0,0,0),(11,1474172505,1,'BCD',2,'You\'re trying to call a number, but unfortunately saved it as a binary-coded decimal (BCD) with each number represented as 4 bits. What organization does 00011000100010000011010001100100011100000000 represent?',1,1478296800,1478307600,'Desiring God',0,1,5,0,0,0),(12,1474172529,1,'Crack',2,'You\'ve found an interesting looking file from forensics on a criminal\'s computer (important.zip), but unfortunately it looks like its password encrypted. Using this password.txt file containing the top 10,000 passwords that people use, see if you can figure out the contents of the secret file.',1,1478296800,1478307600,'4430 9439 1322 5920',0,1,5,0,0,0),(13,1474172546,1,'Rabbits',2,'Let\'s say you\'re trying to create a model of population growth for rabbits. These specfic rabbits are raised with the following timeline:\r\n    year 1 - growth to reproductive age\r\n    start of 2nd year - for every 2 rabbits, they give birth to 9 baby rabbits\r\n    start of 3rd year - for every 2 rabbits, they birth again to 5 baby rabbits\r\n    start of 4th year - consumption of rabbit\r\nGiven the introduction of 10 baby rabbits in July of 2015, how many rabbits will there be in January of 2025?',1,1478296800,1478307600,'21467500',0,1,5,0,0,0),(14,1474172564,1,'Best Month',2,'Download the historic data of the S&P 500 (SP500.csv) and see if you can figure out which month of the year on average has the highest percent gain from the opening price of the first trading day of that month to the closing price of the last trading day that month. Write your answer as \"[Month] [Average Percent Gain with 2 digits past the decimal point]\", i.e. \"January 1.35\".',1,1478296800,1478307600,'December 1.63',0,1,5,0,0,0),(15,1474172577,1,'Tag',2,'Ready for a game of tag? The server at 192.168.1.100 is. Connect to port 749, send the word \"tag\", and see how it responds.',0,1478296800,1478307600,'igottagged',0,1,5,0,0,0),(16,1474172628,1,'Thou Shall Alliterate',3,'Download the kjv.txt file. Find what verse has the longest alliteration (consecutive words where the first letter is the same). For example, \"She sells sea shells by the sea shore\" would have an alliteration of length 4. Write your answer as a standard book/chapter/verse bible reference (i.e. 2 Peter 3:9)',1,1478296800,1478307600,'1 Chronicles 7:8',0,1,20,0,0,0),(17,1474172653,1,'Baby Names',3,'You and your [future] spouse is attempting to come up with a name for your upcoming baby boy. From the top 1000 names each year, you want to pick a name that has increased in popularity for the last 5 years and has the biggest change in rank comparing 2010 to 2014. What will you name your new child? Use the database at http://www.socialsecurity.gov/oact/babynames/#ht=1',1,1478296800,1478307600,'Iker',0,1,20,0,0,0),(18,1474172676,1,'Word Search',3,'I am sorry to ruin all your future enjoyment in solving word searches, but your next challenge is to write a script that will solve this wordsearch.txt puzzle using this dict.txt file. All words that are found must be at least 3 letters long and should be case-insensitve. Words can go both forwards and backwards and can be found within other words (i.e. AWESOME would count as four words: AWE, SEW, SOME, and AWESOME). Put as your answer the number of total words that your script finds.',1,1478296800,1478307600,'158',0,1,20,0,0,0),(19,1475792093,1,'Poker Hand',3,'(Borrowed from Project Euler, problem #54. For more problems like this, check out projecteuler.net)\r\n\r\nIn the card game poker, a hand consists of five cards and are ranked, from lowest to highest, in the following way:\r\n\r\nHigh Card: Highest value card.\r\nOne Pair: Two cards of the same value.\r\nTwo Pairs: Two different pairs.\r\nThree of a Kind: Three cards of the same value.\r\nStraight: All cards are consecutive values.\r\nFlush: All cards of the same suit.\r\nFull House: Three of a kind and a pair.\r\nFour of a Kind: Four cards of the same value.\r\nStraight Flush: All cards are consecutive values of same suit.\r\nRoyal Flush: Ten, Jack, Queen, King, Ace, in same suit.\r\nThe cards are valued in the order:\r\n2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, King, Ace.\r\n\r\nIf two players have the same ranked hands then the rank made up of the highest value wins; for example, a pair of eights beats a pair of fives (see example 1 below). But if two ranks tie, for example, both players have a pair of queens, then highest cards in each hand are compared (see example 4 below); if the highest cards tie then the next highest cards are compared, and so on.\r\n\r\nConsider the following five hands dealt to two players:\r\n\r\nHand	 	Player 1	 	Player 2	 	Winner\r\n1	 	5H 5C 6S 7S KD\r\nPair of Fives\r\n 	2C 3S 8S 8D TD\r\nPair of Eights\r\n 	Player 2\r\n2	 	5D 8C 9S JS AC\r\nHighest card Ace\r\n 	2C 5C 7D 8S QH\r\nHighest card Queen\r\n 	Player 1\r\n3	 	2D 9C AS AH AC\r\nThree Aces\r\n 	3D 6D 7D TD QD\r\nFlush with Diamonds\r\n 	Player 2\r\n4	 	4D 6S 9H QH QC\r\nPair of Queens\r\nHighest card Nine\r\n 	3D 6D 7H QD QS\r\nPair of Queens\r\nHighest card Seven\r\n 	Player 1\r\n5	 	2H 2D 4C 4D 4S\r\nFull House\r\nWith Three Fours\r\n 	3C 3D 3S 9S 9D\r\nFull House\r\nwith Three Threes\r\n 	Player 1\r\nThe file, poker.txt, contains one-thousand random hands dealt to two players. Each line of the file contains ten cards (separated by a single space): the first five are Player 1\'s cards and the last five are Player 2\'s cards. You can assume that all hands are valid (no invalid characters or repeated cards), each player\'s hand is in no specific order, and in each hand there is a clear winner.\r\n\r\nHow many hands does Player 1 win?',1,1478296800,1478307600,'376',1,1,20,0,0,0),(20,1475792286,1,'Number letter counts',3,'(Borrowed from Project Euler, problem #17. For more problems like this, check out projecteuler.net)\r\n\r\nIf the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.\r\n\r\nIf all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?\r\n\r\n\r\nNOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of \"and\" when writing out numbers is in compliance with British usage.',1,1478296800,1478307600,'21124',1,1,20,0,0,0),(21,1475793272,1,'Install Python!',4,'Install python using any of the options below. Once you have it running, paste \"print(int(1.23**4.56))\" (without the quotes) into the terminal and run it. Paste the result below to get points for this step.\r\n\r\n=============================\r\n\r\nRoute 1) Anaconda:\r\n\r\nI suggest installing Anaconda, which includes Python and numerous related tools that make Python easier and more self-contained. You can get the Anaconda package for any common OS from here (I highly recommend getting Python 3.5):\r\n\r\n[url]https://www.continuum.io/downloads[/url]\r\n\r\nYou then have a few options. By far, I recommend using Jupyter Notebook to work with Python. Without getting too nitty-gritty, Jupyter allows you to write and run Python code in your browser, making development SUPER easy, all while documenting your work as you go. To do this (on Windows), go to \"Programs -> Anaconda (or Anaconda3 if you have it) -> Jupyter Notebook\". Running this will open the notebook in your browser, then hit \"new -> Python (or  Python3)\". The large text boxes and \"run\" button should be pretty intuitive from there.\r\n\r\nAlternatively, you can launch IPython, again from the Anaconda folder. This launches a pretty basic terminal that\'s still very powerful and easy to use.\r\n\r\nRoute 2) Simple Python\r\n\r\nIf you want, you can instead install just python, in which case you can get it from here (again, I highly recommend getting Python 3.5):\r\n\r\n[url]https://www.python.org/downloads/[/url]\r\n\r\nOnce installed, you can use the IDLE program that comes with the Windows installer in order to write and run your code. Alternatively, you can run just the Python terminal, which is extremely simplistic but fully functional.\r\n\r\nI\'d only suggest this latter approach if you\'re already a little comfortable with programming, since this approach comes with very few tools or features to help you learn the language.\r\n\r\nRoute 3+) Something else\r\n\r\nThere are several ways to get Python on whatever platform you\'re on. If you don\'t like either of the above approaches, do whatever you want that works.',1,1478293200,1478307600,'2',0,1,1,0,0,0),(22,1475794073,1,'Some simple math',4,'MATH! NO!!!!\r\n\r\nOh, wait, the computer\'s doing all the hard work for you, so don\'t get scared. Computers are really amazing at doing math--like really really amazing. Computer programs (and code, like Python code) is basically all about describing something in a human-rational way that can be accomplished using fancy math under the hood. To get comfortable with this idea, consider some basic math like the below:\r\n\r\nIn [1]: 1 + 2\r\nOut[1]: 3\r\n\r\nIn [2]: 3 * 4\r\nOut[2]: 12\r\n\r\nIn [3]: 6 / 2\r\nOut[3]: 3.0\r\n\r\nAll of the numbers I typed in are \"integers\", but notice how the last answer produces \"3.0\" instead of just \"3\". That\'s because division, such as 5/2, produces decimal numbers, so Python is polite and automatically what we call a \"float\", which just means \"computer-recognizable decimal number\". That\'s one thing that makes Python so great: as far as you\'re concerned, a number is just a number, no matter how it\'s stored under the hood. Feel free to mix integers, decimal numbers, fractions, really big numbers, whatever!\r\n\r\nIn [4]: (1 + 2.0) * 1/3\r\nOut[4]: 1.0\r\n\r\nPython also deals with Order of Operations for you, so you don\'t have to worry about a thing!\r\n\r\nIn [6]: 1 + 2 * 1/3\r\nOut[6]: 1.6666666666666665\r\n\r\nTo demonstrate that you\'re not afraid of a little math, go ahead and get Python to tell you what 1.5 raised to the 3rd power is (note: while * is used for multiplication, ** is used for exponents, e.g. 3**2=9). Paste your answer below for virtually free points!',1,1478293200,1478307600,'3.375',0,1,1,0,0,21),(23,1475794946,1,'Working with text',4,'Text is fundamental to most programs. For example, in most languages, the first thing you learn to do is get the program to greet you. In python, this looks like:\r\n\r\nIn [8]: print(\"Hello, world!\")\r\nHello, world!\r\n\r\nNote the double-quotation marks around \"Hello, world!\". In Python, you can surround arbitrary text with double-quotation marks or single-quotation marks (there\'s no distinction between the two) to indicate that the text is a \"string\". The term \"string\" is traditional in computer science, and refers to a string of characters... that is, \"H\", \"e\", \"l\", ... are each characters, and \"Hello, world!\" is just all of those characters strung together. In Python, there is essentially no distinction between characters and strings. A character is just a string of length one.\r\n\r\nPython allows you to do some pretty spiffy things with strings. For example, you can put two strings together:\r\n\r\nIn [9]: \"Hello \" + \"world!\"\r\nOut[9]: \'Hello world!\'\r\n\r\nOr repeat strings:\r\n\r\nIn [10]: \"=\" * 5\r\nOut[10]: \'=====\'\r\n\r\nOr get characters out of a string:\r\n\r\nIn [11]: \"Hello, world!\"[1]\r\nOut[11]: \'e\'\r\n\r\nAgain, it\'s worth pointing out that there\'s no difference between enclosing a string in double-quotations or single-quotations. Use whichever you want, you just have to be consistent on a given string... [code]\"fail\'[/code] won\'t work, for example.\r\n\r\nFinally, anything can be converted to a string using \"str\", as follows:\r\n\r\nIn [14]: str(5 + 3)\r\nOut[14]: \'8\'\r\n\r\nFirst, 5+3 is computed as 8, then the result is converted to a string, hence the quotation marks around the result. You might find this handy if you try doing things like:\r\n\r\nIn [15]: print(\"Current answer is: \" + str(8))\r\nCurrent answer is: 8\r\n\r\nYou\'ll get an error if you forget to convert the number 8 into the string \"8\", since adding a string and a number is a meaningless thing to do.\r\n\r\nAnyway, enough is enough. Go ahead and type the following code into your terminal and run it. The result, without quotation marks, is your answer.\r\n\r\nimport random; random.seed(1); \"I \" + random.choice([\"love \", \"hate \"]) * 3 + \"Python\"',1,1478293200,1478307600,'I love love love Python',1,1,1,0,0,22),(24,1475795998,1,'Making lists',4,'You might\'ve noticed a few unexplained things in the \"strings\" lesson. The one I\'d like to talk about next is how we got a single character out of the string. If you recall, I did this:\r\n\r\nIn [11]: \"Hello, world!\"[1]\r\nOut[11]: \'e\'\r\n\r\nUsing brackets like this allows us to get one item out of a list of items. In the case of a string, each character is an item. Why did getting item number 1 get \"e\" instead of \"H\" though? Because computers start counting at 0, not 1. \r\n\r\nIn [21]: \"Hello, world!\"[0]\r\nOut[21]: \'H\'\r\n\r\nIn [22]: \"Hello, world!\"[1]\r\nOut[22]: \'e\'\r\n\r\nYou may not like it, but it\'s not just tradition, it\'s actually really useful when you start doing more advanced programming. That said, don\'t forget that lists start at 0, not 1. In Python, you can also count backward from the end by using negative numbers:\r\n\r\nIn [23]: \"Hello, world!\"[-1]\r\nOut[23]: \'!\'\r\n\r\nOr you can use two numbers, joined by a colon, like A:B, to get a range of values from A until B:\r\n\r\nIn [25]: \"Hello, world!\"[1:5]\r\nOut[25]: \'ello\'\r\n\r\nPython allows some extremely powerful ways to work with lists of objects, but many of those are beyond what you\'ll need for this Pythonathon. Let\'s instead note that lists aren\'t just strings. You could, for example, have a collection of numbers. Any time you\'re making a list of things that\'s not just a string, we enclose it with brackets:\r\n\r\nIn [26]: [1,2,3]\r\nOut[26]: [1, 2, 3]\r\n\r\nThe 0th item of this list, for example, would be the value 1. What? You don\'t believe me?\r\n\r\nIn [27]: [1,2,3][0]\r\nOut[27]: 1\r\n\r\nSee? Lists can get very complex, and don\'t have to include just numbers. We could, for example, do:\r\n\r\n[1, 2, \"three\"]\r\n[1, 2, [3, 4, 5]]\r\n[None, \"two\", 3]\r\n\r\nThe last element of each of these arrays would be, respectively: \"three\", [3,4,5], and 3. \"None\" is a special word in python that just means, \"nothing\". It will frequently show up, and simply represent the lack of a value.\r\n\r\nJust like strings, you can append and multiply lists:\r\n\r\nIn [33]: [1] + [2] + [3]\r\nOut[33]: [1, 2, 3]\r\n\r\nIn [34]: [1] * 3\r\nOut[34]: [1, 1, 1]\r\n\r\nOk, I\'ve messed with your head enough for this. For the flat, just enter the third (NOT item 3, but the third) item in the following list:\r\n\r\n[1] + list(\"two\")',1,1478293200,1478307600,'w',1,1,1,0,0,23),(25,1475796595,1,'Variables',4,'To do anything more complex than one line, you\'ll most likely end up using variables. There actually are types of programming languages that largely reject the idea of variables, but they\'re a bit pompous and odd, and we\'re going to pretend like they don\'t exist for now. Certainly, Python is heavily based on using variables, and in fact has some amazing features for interacting with them.\r\n\r\nA variable can be defined simply by naming it and giving it a value:\r\n\r\nIn [37]: x = 1\r\n\r\nIn [38]: print(x)\r\n1\r\n\r\nNote that now, whenever I refer to x, I get the value contained in it instead. Variables, as the name suggest, can have various values and can vary over their lifetime:\r\n\r\nIn [39]: x = 2\r\n\r\nIn [40]: print(x)\r\n2\r\n\r\nIn [41]: x = 3\r\n\r\nIn [42]: print(x)\r\n3\r\n\r\nVariables can contain any value at all, and in Python, a variable can change types whenever you want:\r\n\r\nIn [44]: print(x)\r\n4\r\n\r\nIn [45]: x = \"five\"\r\n\r\nIn [46]: print(x)\r\nfive\r\n\r\nIn [47]: x = [6]\r\n\r\nIn [48]: print(x)\r\n[6]\r\n\r\nIn fact, we can have lots of variables!\r\n\r\nIn [54]: y = 7\r\n\r\nIn [56]: the_answer = x[0] * y\r\n\r\nIn [57]: print(the_answer)\r\n42\r\n\r\nAs noted here, you can use variables just like the values they contain. In fact, Python thrives on the idea that you can try to do whatever you want with whatever variable you want. It may fail on you, but Python won\'t stop you from trying:\r\n\r\nIn [58]: print(x[0])\r\n6\r\n\r\nIn [59]: print(y[0])\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-59-3f91e76762f0> in <module>()\r\n----> 1 print(y[0])\r\nTypeError: \'int\' object is not subscriptable\r\n\r\nSince y is a number (\'int\'), you can\'t \"subscript\" (index) it like an array. Since x is an array, you can do that just fine.\r\n\r\nAnyway, if x=5, and y=x+1, what\'s x**y?',1,1478293200,1478307600,'15625',0,1,1,0,0,24),(26,1475797982,1,'Control yourself, man!',4,'Now that we\'re able to make code that\'s more than one line long, we can start getting fancy:\r\n\r\nIn [61]: a = 1\r\n\r\nIn [62]: b = a + 2\r\n\r\nIn [63]: c = b + 3\r\n\r\nIn [64]: d = c + 4\r\n\r\nWow, this is fun... zzzzzz. At some point, we need to do make some useful decisions. For example, what if I want to compute what the value of \"z\" would be if I continued this pattern? I could type out each letter, but that would get mind-numbing. This is where loops come into play. Let\'s store each value in a variable called \"a\", then figure out what we should add using another variable, \"i\". It could look something like this:\r\n\r\ni = 2\r\na = 1\r\nfor letter in \'bcdefghijklmnopqrstuvwxyz\':\r\n    a = a + i\r\n    print(letter + \" is \" + str(a))\r\n    i = i + 1\r\n\r\nwhich outputs the following:\r\n\r\nb is 3\r\nc is 6\r\nd is 10\r\ne is 15\r\nf is 21\r\ng is 28\r\nh is 36\r\ni is 45\r\nj is 55\r\nk is 66\r\nl is 78\r\nm is 91\r\nn is 105\r\no is 120\r\np is 136\r\nq is 153\r\nr is 171\r\ns is 190\r\nt is 210\r\nu is 231\r\nv is 253\r\nw is 276\r\nx is 300\r\ny is 325\r\nz is 351\r\n\r\nVoila! That was so much easier than typing all those lines of code. But how did it work? Here\'s the syntax:\r\n\r\nfor X in Y:\r\n   code\r\n\r\nWhere Y is some list (in our other case, we used a string like a list), X is some variable name, and \"code\" is what you want to execute. Python then takes the first element from Y (\'b\', in our case), puts that value in X, and runs \"code\". Once the code is done running, it takes the second element from Y (\'c\'), puts that in X, and runs \"code\" again. It repeats this process until every value from Y has been used. Note that \"code\" can be multiple lines of code, they just all need to be indented the same amount.\r\n\r\nWe can similarly do conditional execution, where certain code is only executed if a certain check holds true. Let\'s consider reporting whether or not the final value of \"a\" was even or odd. \r\n\r\nIn [68]: is_odd = a % 2 # Just believe me on this one\r\n\r\nIn [70]: if is_odd:\r\n   ....:     print(\"It was odd!\")\r\n   ....: else:\r\n   ....:     print(\"Don\'t even...\")\r\n   ....:\r\nIt was odd!\r\n\r\nOur first line checks if a is odd (more precisely, it checks if a divided by 2 has any remainder besides 0), and if so, it prints the message we received. Note that the second message didn\'t print, because the condition of \"else\" is that the associated \"if\" was false. This makes sense if you think of it in English: \"If you touch my daughter, I\'ll kill you... else, we can get along just fine.\" The equivalent of this in Python would be:\r\n\r\nif touched_daughter:\r\n    me = \"X_X\"\r\nelse:\r\n    me = \"O.o\"\r\n\r\nNote, again, that the indentation tells us what is under the \"if\" and \"else\" statements. Some people find this annoying, but others (like me) like that this indentation rule makes Python code, in general, quite easy to read.\r\n\r\nI don\'t want to talk about boolean logic much, but here\'s a quick run down. Python includes the reserved words \"True\" and \"False\" to mean exactly what the sound like. In addition, any value that isn\'t 0, None, or an empty list/string is considered equivalent to \"True\". You can force any value into being \"True\" or \"False\" using the bool() function (e.g., bool(\'\') is False, and bool(1) is True). You can use the special phrase \"is None\" or \"is not None\" to check if a variable has None stored in it. You can use \"not\" to flip between True and False; you can use \"and\" to check if two values are both True; you can use \"or\" to check if either value is true. For example, \"a or b and not c\" is a valid boolean check in Python. You can compare any two values (not just boolean values) using \"==\" (equals), \"!=\" (not equals), \"<=\", or \">=\". Note that \"x = 3\" assigned the value 3 to the variable x, whereas \"x == 3\" checks if the value in x is equal to 3, and returns True or False. There\'s obviously much more, but that\'s all you\'ll need in most cases.\r\n\r\n\r\nUsing what you learned above, you can now solve this problem to get some points: Let x be 2 raised to the 8th power, minus 1. If x is divisible by 3 (here\'s some help: \"is_divisible = (x % 3 == 0)\"), then return x / 3; otherwise, return x * 2. Give the answer as an integer (that is, if Python says \"100.0\", just give \"100\")',1,1478293200,1478307600,'85',0,1,1,0,0,25),(27,1475799274,1,'Wrap-up and gettin\' fancy',4,'You now know everything you need to know to get started solving the remaining problems. If you\'re not confident about your Python abilities so far, skip this question, most of the problems won\'t benefit from the knowledge below, or they\'ll teach you what you need when you need it. If you find Python exciting, then the features below may stoke that fire a little. Either way, it\'s not a lot of points, and the topics below aren\'t necessary to having fun tonight or potentially winning.\r\n\r\nSo seriously, move on to the Easy problems if you want.\r\n\r\n\r\n\r\n\r\nOk, here we go...\r\n\r\n===================\r\nModules\r\n===================\r\n\r\nThis one\'s essential: the power of Python comes not just from its simplicity, but from the thousands of packages it offers that each do something very specific for you. Leveraging a few these packages (a working knowledge of just a couple dozen will get you far in life) is essential to solving anything more than a trivial problem. We can load these packages in so that they\'re available to use with the \"import\" keyword. For example, if we wanted to use a function available from the \"itertools\" package, we could do the following:\r\n\r\nIn [101]: import itertools\r\n\r\nIn [103]: list(itertools.combinations([1,2,3], 2))\r\nOut[103]: [(1, 2), (1, 3), (2, 3)]\r\n\r\nNote two things: one, the \"itertools.combinations\" retreives \"combinations\" from \"itertools\" (that\'s what the period means between the two words); two, the resulting list, [(1, 2), ...] is just a list of lists, where the parenthesis mark the inner lists. Technically, the parenthesis mean that these are \"tuples\" instead of \"lists\", but if you care about the difference, Google the term. They behave almost identically.\r\n\r\n===================\r\nList Comprehension\r\n===================\r\n\r\nPython has a built-in feature that\'s ridiculously useful for working with lists or other blobs of data. This is called list comprehension, and it looks like the following:\r\n\r\nIn [104]: [i ** 2 for i in [1, 2, 3, 4, 5]]\r\nOut[104]: [1, 4, 9, 16, 25]\r\n\r\nList comprehension looks like the following:\r\n\r\n[code for X in Y]\r\n\r\nThe result is EXACTLY the same as the following code:\r\n\r\nresult = []\r\nfor X in Y:\r\n   result.append(code)\r\n\r\nHowever, the list comprehension version is prettier, shorter, and, oddly, can run faster. Also, list comprehensions are useful for working with lists of lists, if you should so desire:\r\n\r\n[code for A in B for C in D]\r\n\r\nWhich is equivalent to:\r\n\r\nresult = []\r\nfor A in B:\r\n    for C in D:\r\n        result.append(code)\r\n\r\nYou can also include conditions:\r\n\r\n[code for X in Y if condition]\r\n\r\n###\r\n\r\nresult = []\r\nfor X in Y:\r\n    if condition:\r\n        result.append(code)\r\n\r\nYou can even nest list comprehensions inside each other:\r\n\r\n[code for X in [code2 for Y in Z if condition2] if condition]\r\n\r\n###\r\n\r\nresult2 = []\r\nfor Y in Z:\r\n    if condition2:\r\n        result2.append(code2)\r\nresult = []\r\nfor X in result2:\r\n    if condition:\r\n        result.append(code)\r\n\r\nYou can see how, very quickly, list comprehensions can radically simplify code working with complex data. Most likely, you won\'t need list comprehensions for any of the easy or medium problems, but they might make your life easier on the harder problems.\r\n\r\n===================\r\nTernary Operator\r\n===================\r\n\r\nSometimes, you just need a quick condition, and a whole \"if\" statement is overkill. For such cases, we have the ternary operator:\r\n\r\nx = val1 if condition else val2\r\n\r\nFor example:\r\n\r\nis_odd = True if x % 2 != 0 else False\r\n\r\nIf the condition works out to be true, then the first value is returned; otherwise, the second value is returned. This is functionally equivalent to:\r\n\r\nif x % 2 != 0:\r\n    is_odd = True\r\nelse:\r\n    is_odd = False\r\n\r\nThis becomes really handy in more complex scenarios:\r\n\r\nIn [119]: for i in [1,2,3,4,5,6]:\r\n   .....:     print(str(i) + \" is \" + (\"odd\" if i % 2 else \"even\"))\r\n   .....:\r\n1 is odd\r\n2 is even\r\n3 is odd\r\n4 is even\r\n5 is odd\r\n6 is even\r\n\r\n===================\r\nClosing\r\n===================\r\n\r\nThere\'s so much more to Python, but that\'ll all come in time. You\'re now more than fully equipped to tackle all of the problems in tonight\'s Pythonathon, so relax, sit back, and have fun! To get your final free points from this problem, use a list comprehension to find the cubes of the numbers 1...6. Your answer would look something like the following, except with all six values:\r\n\r\n[1, 8, 27]',1,1478293200,1478307600,'[1, 8, 27, 64, 125, 216]',0,1,3,0,0,28),(28,1475799281,1,'Getting Funcy',4,'Sometimes, you want to do the same thing over and over again, and you\'d rather save the code that does that task. Look no farther than a humble function. A function is nothing more than something that takes zero or more values and returns something. For example, to use a classic:\r\n\r\nIn [79]: def add(a, b):\r\n   ....:     return a + b\r\n   ....:\r\n\r\nIn [80]: print(add(1, 2))\r\n3\r\n\r\nOf course, functions can do darn near anything:\r\n\r\nIn [81]: def beam_me(person):\r\n   ....:     return \"I\'ve got you, \" + person\r\n   ....:\r\n\r\nIn [82]: up = \"Captain\"\r\n\r\nIn [83]: beam_me(up)\r\nOut[83]: \"I\'ve got you, Captain\"\r\n\r\nOk, maybe functions can\'t actually teleport you to other planets, but they sure can teleport you to whole new levels of coding. Saving code in a function will allow you to do all sorts of complicated things with very simple code. In the example above, \"person\" is called a \"parameter\" of the function \"beam_me\", and \"up\" is the \"argument\" that you passed to \"beam_me\" when you called it. Note that \"def beam_me...\" DEFINES the function \"beam_me\", whereas \"beam_me(up)\" EXECUTES the function, giving the value in \"up\" to be used wherever \"person\" got used in the function\'s definition.\r\n\r\nPython also allows some huge conveniences when creating and using functions. In particular, you can give parameters default values:\r\n\r\nIn [84]: def increment(value, by=1):\r\n   ....:     value = value + by\r\n   ....:     return value\r\n   ....:\r\n\r\nIn [87]: increment(5)\r\nOut[87]: 6\r\n\r\nIn [88]: increment(5, 3)\r\nOut[88]: 8\r\n\r\nIn [89]: increment(5, by=3)\r\nOut[89]: 8\r\n\r\nWhat? What\'s that? Referring to a parameter by name? Why, yes! In fact, you can do this all over the place:\r\n\r\nIn [90]: def bad_sum(a, b=0, c=0, d=0, e=0, f=0):\r\n   ....:     return a + b + c + d + e + f\r\n   ....:\r\n\r\nIn [91]: bad_sum(1, c=2)\r\nOut[91]: 3\r\n\r\nIn [92]: bad_sum(2, e=3, b=4)\r\nOut[92]: 9\r\n\r\nThere are MUCH better ways to define that \"bad_sum\" function (hence its name), but I\'m not going to get into all the fancy ways to define function is Python. There\'s lots of good tutorials online if you want to look more into it.\r\n\r\nHere\'s a function:\r\n\r\ndef fancy_function(x, a=1, b=1):\r\n    if x == b:\r\n        print(\"x is in the Fibonacci sequence!\")\r\n    elif x < b:\r\n        print(\"x is not in the Fibonacci sequence!\")\r\n    else:\r\n        fancy_function(x, b, a+b)\r\n\r\nUsing this function, is 2**20 - 1 in the fibonacci sequence? Answer \"yes\" or \"no\" (no quotation marks)',1,1478293200,1478307600,'no',1,1,1,0,0,26);
/*!40000 ALTER TABLE `challenges` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `files`
--

DROP TABLE IF EXISTS `files`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `files` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `added` int(10) unsigned NOT NULL,
  `added_by` int(10) unsigned NOT NULL,
  `title` varchar(255) NOT NULL,
  `size` int(10) unsigned NOT NULL,
  `md5` char(32) NOT NULL,
  `download_key` char(64) NOT NULL,
  `challenge` int(10) unsigned NOT NULL,
  `file_type` enum('local','remote') NOT NULL DEFAULT 'local',
  PRIMARY KEY (`id`),
  UNIQUE KEY `download_key` (`download_key`),
  KEY `challenge` (`challenge`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `files`
--

LOCK TABLES `files` WRITE;
/*!40000 ALTER TABLE `files` DISABLE KEYS */;
INSERT INTO `files` VALUES (2,1475792157,1,'p054_poker.txt',30000,'de3975ec563b4a59baf4e524c0b08558','e44fa0e8e25da434386b8c28ebc56a80be8007b78f58d7f3f25eb469bdeaf11b',19,'local'),(3,1475804754,1,'kjv.txt',4339319,'3226a11d1e9fb741d7c2776dc67ebcf8','0706559d979f8b8d9eb8a5b90e12847db9fc9c21b04f50e25308d927eba0d810',6,'local'),(4,1475804794,1,'encoded.txt',21152,'a0a93bfc084699b3c3b44bbbb5587362','dde9a7844c08dfbb3e96dc7536c37471b30d1e8ab456aa5a5ef64fc390654b68',7,'local'),(5,1475804822,1,'kjv.txt',4339319,'3226a11d1e9fb741d7c2776dc67ebcf8','532887db0778ca1a95994b79d397073081a73af5d8f1e3e48906147efad7c081',16,'local'),(8,1475805002,1,'wordsearch.txt',463,'f2236810b39da58fb77f6d0b91e38559','e7fb209c07e4ef2f0c4e8e022f49cad078ddfbb72fe218565f519569e42cabd4',18,'local'),(9,1475805104,1,'important.zip',185,'4d3fc3cb43625508933e5b14139c460b','46f1fc41fc13b5e8aa95a9fcb1e75ca2e9d421e81960b66420893172c58a4943',12,'local'),(10,1475805109,1,'passwords.txt',83017,'7647bfc3f1076c3c4c217201101b28b3','47a468ca3ce682308f273e347cd28a66e70f031d16efb1d42d969c1b665602ce',12,'local'),(11,1475805145,1,'SP500.csv',1216627,'e20853aa08b56a806db1bdbe636bb52e','51bf0334ebe99e7cc7dc0bda6ff7ac96565cc26e82abfe652658e50ff3680edd',14,'local');
/*!40000 ALTER TABLE `files` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `hints`
--

DROP TABLE IF EXISTS `hints`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hints` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `challenge` int(10) unsigned NOT NULL,
  `added` int(10) unsigned NOT NULL,
  `added_by` int(10) unsigned NOT NULL,
  `visible` tinyint(1) NOT NULL DEFAULT '0',
  `body` text NOT NULL,
  PRIMARY KEY (`id`),
  KEY `challenge` (`challenge`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `hints`
--

LOCK TABLES `hints` WRITE;
/*!40000 ALTER TABLE `hints` DISABLE KEYS */;
/*!40000 ALTER TABLE `hints` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2016-12-30  8:44:21
